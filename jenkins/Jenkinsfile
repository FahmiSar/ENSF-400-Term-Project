pipeline {
    agent {
        docker {
            image 'gradle:7.6.4-jdk11'
            args '-v $HOME/.gradle:/home/gradle/.gradle --entrypoint=""'
        }
    }
    stages {
        stage('Install Pipenv for Python') {
            steps {
                sh 'apt-get update && apt-get install -y python3-pip && pip3 install pipenv'
            }
        }
        stage('Build Java') {
            steps {
                sh './gradlew clean assemble'
            }
        }
        stage('Java Unit Tests') {
            steps {
                sh './gradlew test'
            }
            post {
                always {
                    junit 'build/test-results/test/*.xml'
                    jacoco execPattern: 'build/jacoco/test.exec'
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonarqube') {
                    // Run SonarQube analysis
                    sh './gradlew sonarqube --stacktrace'
                }     
                sleep 30
                script {
                    def qg = waitForQualityGate()
                    if (qg.status != 'OK') {
                        error "Quality gate failed: ${qg.status}"
                    }
                }       
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: 'build/reports/**/*', allowEmptyArchive: true
        }
    }
}